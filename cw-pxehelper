#!/usr/bin/env python

#--------------------------------------------------------------------------
#
# Copyright 2014, 2015 Cumulus Networks, inc  all rights reserved
#
#--------------------------------------------------------------------------

SNAME="cw-mux"

# look for wbench.json
JSONPATH=""
SHOW="0"
if [ -f "wbench.json" ]
then
    JSONPATH="wbench.json"
elif [ -f "/var/www/wbench.json" ]
then
    JSONPATH="/var/www/wbench.json"
else
    echo "ERROR: wbench.json not found"
    exit 1
fi

mouse=0

while getopts "mhsl" arg; do
    case $arg in
    h)
        echo "usage: $( basename $0 ) [-msl]"
        echo "     -m        Enable mouse mode"
        echo "     -s        Show spine windows only"
        echo "     -l        Show leaf windows only"
        exit 0
        ;;
    m)
        mouse=1
        echo "Enabling mouse"
        ;;
    s)  SHOW="1"
        ;;
    l)  SHOW="2"
        ;;
    esac
done

# grab wbench details
WBENCHID=`jq '.[] | .workbench.wbench_id' $JSONPATH`
WBENCHCLASS=`jq -r '.[] | .workbench.wbench_class' $JSONPATH`
CUSTNAME=`jq -r '.[] | .customer' $JSONPATH`
RESID=`jq '.[] | .id' $JSONPATH`
ENDDATE=(`jq -r '.[] | .end_date' $JSONPATH`)
NUMSWITCHES=`jq -r '.[] | .workbench.switches | length' $JSONPATH`
NUMSERVERS=`jq -r '.[] | .workbench.servers | length' $JSONPATH`
DIAGRAMSDIR="/usr/local/cumulus/topologies/"

# check for tmux
if ! hash tmux 2>/dev/null; then
    echo "ERROR: tmux not installed"
    exit 1
fi

# make sure topology diagram exists
if [ ! -f "$DIAGRAMSDIR$WBENCHCLASS.txt" ]
then
    echo "WARNING: topology '$WBENCHCLASS' not defined"
fi

# server might not be running already
tmux start-server

# create session if doesn't already exist, give the user the option to share
# or detach if it does.
DETACH="-d"
if tmux list-sessions | grep -q "$SNAME:"
then
    echo "An existing session is in progress, do you wish to..."
    select OPTION in "detach" "share";
    do
      case $OPTION in
        "detach")
        break
        ;;
        "share")
        DETACH=""
        break
        ;;
      esac
    done
    echo "Existing session"
    tmux att $DETACH  -t $SNAME
    exit 0
else
    echo "No session exists"
    tmux new-session -d -s $SNAME -n Overview
    tmux send-keys "cw-mux-helper overview $WBENCHCLASS" 'C-m'
fi

# ctrl-b ctrl-p = CumulusLinux!
tmux bind-key C-p run 'tmux set-buffer CumulusLinux!; tmux paste-buffer'

# ctrl-b ctrl-c = cumulus
tmux bind-key C-c run 'tmux set-buffer cumulus; tmux paste-buffer'

# ctrl-b ctrl-s synchronize window panes
tmux bind-key C-s set-window-option synchronize-panes

# set up mouse
if [[ $mouse == 1 ]]
then
    tmux set-option mode-mouse on
    tmux set-option mouse-select-pane on
    tmux set-option mouse-resize-pane on
    tmux set-option mouse-select-window on
else
    tmux set-option mouse-mode off
fi

# turn off mouse-utf8
tmux set-option mouse-utf8 off

# correctly set terminal type
tmux set-option default-terminal "screen-256color"

# config the status bar
tmux set-option -t $SNAME status-bg green
tmux set-option -t $SNAME status-fg black
tmux set-window-option -g -t $SNAME window-status-current-bg blue
tmux set-window-option -g -t $SNAME window-status-current-fg white
tmux set-option -t $SNAME base-index 1  # not working
tmux set-option -t $SNAME escape-time 0
tmux set-window-option -t $SNAME aggressive-resize on
tmux set-option -t $SNAME status-left "#[fg=black] WB-$WBENCHID "
tmux set-option -t $SNAME status-right "#[bg=black] #[fg=white] $WBENCHCLASS #[fg=black] #[bg=cyan] ResID $RESID #[bg=red] Until $ENDDATE     "

# Password binding

tmux bind-key C-p run 'tmux set-buffer CumulusLinux!; tmux paste-buffer'
tmux bind-key C-l run 'tmux break-pane -d -t 0; tmux break-pane -d -t 1'
tmux bind-key C-l run 'tmux break-pane -d -t 0; tmux break-pane -d -t 1'


# workbench
tmux new-window -t $SNAME -n Workbench
tmux send-keys 'cw-mux-helper workbench' 'C-m'

# switches
if [ "$NUMSWITCHES" -gt "0" ]
then
    for MUXTYPE in "ssh" "switch"
    do
        if [ "$MUXTYPE" == "ssh" ]
        then
            tmux new-window -t $SNAME -n SwSSH
        else
            tmux new-window -t $SNAME -n SwConsole
        fi
        if [ "$NUMSWITCHES" -eq "1" ]
        then
            tmux send-keys "cw-mux-helper $MUXTYPE leaf1" 'C-m'
        elif [ "$NUMSWITCHES" -eq "2" ]
        then
            tmux send-keys "cw-mux-helper $MUXTYPE leaf1" 'C-m'
            tmux split-window -v -t $SNAME
            tmux send-keys "cw-mux-helper $MUXTYPE leaf2" 'C-m'
        elif [ "$NUMSWITCHES" -eq "4" ]
        then
             tmux split-window -d -t 0 -v
             if [ "$SHOW" -eq "0" ]
             then
               tmux split-window -d -t 0 -h
               tmux split-window -d -t 2 -h
             fi
             tmux select-layout tiled
             if [ "$SHOW" -eq "0" ]
             then
               tmux send-keys -t 0 "cw-mux-helper $MUXTYPE spine1" 'C-m'
               tmux send-keys -t 1 "cw-mux-helper $MUXTYPE spine2" 'C-m'
               tmux send-keys -t 2 "cw-mux-helper $MUXTYPE leaf1" 'C-m'
               tmux send-keys -t 3 "cw-mux-helper $MUXTYPE leaf2" 'C-m'
             elif [ "$SHOW" -eq "2" ]
             then
               tmux send-keys -t 0 "cw-mux-helper $MUXTYPE leaf1" 'C-m'
               tmux send-keys -t 1 "cw-mux-helper $MUXTYPE leaf2" 'C-m'
             elif [ "$SHOW" -eq "1" ]
             then
               tmux send-keys -t 0 "cw-mux-helper $MUXTYPE spine1" 'C-m'
               tmux send-keys -t 1 "cw-mux-helper $MUXTYPE spine2" 'C-m'
             fi
        else
            echo "Unusual number of switches"
        fi
    done
fi

# servers
if [ "$NUMSERVERS" -gt "0" ]
then
    tmux new-window -t $SNAME -n Servers
    if [ "$NUMSERVERS" -eq "2" ]
    then
        tmux send-keys 'cw-mux-helper server server1' 'C-m'
        tmux split-window -v -t $SNAME
        tmux send-keys 'cw-mux-helper server server2' 'C-m'
    else
        echo "Unusual number of switches"
    fi
fi

# apache log
tmux new-window -t $SNAME -n ApacheLog
tmux send-keys 'sudo tail -f /var/log/apache2/access.log | ccze' 'C-m'

# focus on first window
tmux select-window -t $SNAME:0

# attach
tmux att -d -t $SNAME

exit 0

import argparse
import argcomplete
import json
import os
from shutil import *

#
# $ cw-pxehelper -s server1 -o esx55 -n
#

WBENCHCFG = "/var/www/wbench.json"
PXECFGDIR = "/var/lib/tftpboot/pxe/pxelinux.cfg"

def readconfig():
    if os.path.isfile(WBENCHCFG) is False:
        print "ERROR: Workbench JSON not found"
        exit(1)
    cfgfile = open(WBENCHCFG,'r')
    try:
        cfg = json.load(cfgfile)
    except:
        print "ERROR: Unable to parse workbench JSON"
        exit(1)
    cfgfile.close()
    return cfg

def pxeremovecopy(servername, cfgserver, pxecfgsrc):
    pxemac = "01-" + cfgserver["pxemac"].replace(":","-").strip()
    pxecfgdst = "%s/%s" % (PXECFGDIR, pxemac)
    if os.path.isfile(pxecfgdst):
        try:
            os.remove(pxecfgdst)
        except:
            print "ERROR: Could not remove %s, are you root?" % (pxecfgdst)
            exit(1)
        print "* Removed existing config for %s / %s" % (servername, pxemac)

    try:
        copyfile(pxecfgsrc, pxecfgdst)
    except:
        print "ERROR: Could not copy PXELinux config, are you root?"
        exit(1)
    print "* Copied PXELinux config for %s / %s" % (servername, pxemac)

    return

def ipmicmd(cfgserver, opts):
    ipmiip = cfgserver["ipmiip"]
    ipmiuser = cfgserver["ipmiuser"]
    ipmipassword = cfgserver["ipmipassword"]
    ipmicmd = "ipmitool -U %s -P %s -H %s" % (ipmiuser,ipmipassword,ipmiip)
    cmd = "%s %s" % (ipmicmd, opts)
    return os.popen(cmd).read()


def servercompleter(prefix, **kwargs):
    cfg = readconfig()
    cfgwb = cfg["reservation"]["workbench"]
    if "servers" not in cfgwb:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    cfgservers = cfgwb["servers"]
    if len(cfgservers) == 0:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    return (v for v in cfgwb["servers"] if v.startswith(prefix))

def oscompleter(prefix, **kwargs):
    # pxe dir
    files = []
    if os.path.isdir(PXECFGDIR) is False:
        print "ERROR: PXELinux dir '%s' missing" % (PXECFGDIR)
        exit(1)
    for f in os.path.listdir(PXECFGDIR):
        if f.startswith("cfg-"):
            files.append(f[4:])

    return (v for v in files if v.startswith(prefix))

def main():

    # cmd opts
    parser = argparse.ArgumentParser(description='Cumulus workbench PXE installer helper')
    parser.add_argument('-s', help='server name',action='store',dest='server',required=True).completer = servercompleter
    parser.add_argument('-o', help='operating system reference',action='store',dest='os',required=True).completer = oscompleter
    parser.add_argument('-n', help='IPMI provision now',action='store_true',dest='now',required=False)

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # check and read json, does this wb even have servers? etc
    cfg = readconfig()
    cfgwb = cfg["reservation"]["workbench"]
    if "servers" not in cfgwb:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    cfgservers = cfgwb["servers"]
    if len(cfgservers) == 0:
        print "ERROR: No servers attached to this workbench"
        exit(1)

    # check server specified exists
    cfgserver = None
    if args.server in cfgservers:
        cfgserver = cfgservers[args.server]
    else:
        print "ERROR: server '%s' not found in workbench" % (args.server)
        exit(1)

    # pxe dir
    if os.path.isdir(PXECFGDIR) is False:
        print "ERROR: PXELinux dir '%s' missing" % (PXECFGDIR)
        exit(1)

    # check OS specified exists
    pxecfgsrc = "%s/cfg-%s" % (PXECFGDIR, args.os)
    if os.path.isfile(pxecfgsrc) is False:
        print "ERROR: OS '%s' PXELinux cfg missing" % (args.os)
        exit(1)

    # try remove and copy
    pxeremovecopy(args.server, cfgserver, pxecfgsrc)

    # IPMI reboot and pxe first?
    if args.now:
        # TODO: maybe check IP responds
        print "* Attempting IPMI (%s) PXE first and reboot" % (cfgserver["ipmiip"])
        status = ipmicmd(cfgserver, "chassis power status").strip().lower()
        if status == "chassis power is on":
            print "* Power is on, setting PXE boot and power cycling"
            ipmicmd(cfgserver, "chassis bootdev pxe")
            ipmicmd(cfgserver, "chassis power cycle")
        elif status == "chassis power is off":
            print "* Power is off, setting PXE boot and powering on"
            ipmicmd(cfgserver, "chassis bootdev pxe")
            ipmicmd(cfgserver, "chassis power on")
        else:
            print "ERROR: Unknown power state '%s'" % (status)
            exit(1)
    exit(0)


if __name__ == '__main__':
    main()
