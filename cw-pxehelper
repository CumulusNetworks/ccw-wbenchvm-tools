#!/usr/bin/env python

#--------------------------------------------------------------------------
#
# Copyright 2014 Cumulus Networks, inc  all rights reserved
#
#--------------------------------------------------------------------------

import argparse
import argcomplete
import json
import os
from shutil import *

#
# $ cw-pxehelper -s server1 -o esx55 -n
#

WBENCHCFG = "/var/www/wbench.json"
PXECFGDIR = "/var/lib/tftpboot/pxe/pxelinux.cfg"

def readconfig():
    if os.path.isfile(WBENCHCFG) is False:
        print "ERROR: Workbench JSON not found"
        exit(1)
    cfgfile = open(WBENCHCFG,'r')
    try:
        cfg = json.load(cfgfile)
    except:
        print "ERROR: Unable to parse workbench JSON"
        exit(1)
    cfgfile.close()
    return cfg

def pxeremovecopy(servername, cfgserver, pxecfgsrc):
    pxemac = "01-" + cfgserver["pxemac"].replace(":","-").strip()
    pxecfgdst = "%s/%s" % (PXECFGDIR, pxemac)
    if os.path.isfile(pxecfgdst):
        try:
            os.remove(pxecfgdst)
        except:
            print "ERROR: Could not remove %s, are you root?" % (pxecfgdst)
            exit(1)
        print "* Removed existing config for %s / %s" % (servername, pxemac)

    try:
        copyfile(pxecfgsrc, pxecfgdst)
    except:
        print "ERROR: Could not copy PXELinux config, are you root?"
        exit(1)
    print "* Copied PXELinux config for %s / %s" % (servername, pxemac)

    return

def ipmicmd(cfgserver, opts):
    ipmiip = cfgserver["ipmiip"]
    ipmiuser = cfgserver["ipmiuser"]
    ipmipassword = cfgserver["ipmipassword"]
    ipmicmd = "ipmitool -U %s -P %s -H %s" % (ipmiuser,ipmipassword,ipmiip)
    cmd = "%s %s" % (ipmicmd, opts)
    return os.popen(cmd).read()


def servercompleter(prefix, **kwargs):
    cfg = readconfig()
    cfgwb = cfg["reservation"]["workbench"]
    if "servers" not in cfgwb:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    cfgservers = cfgwb["servers"]
    if len(cfgservers) == 0:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    return (v for v in cfgwb["servers"] if v.startswith(prefix))

def oscompleter(prefix, **kwargs):
    # pxe dir
    files = []
    if os.path.isdir(PXECFGDIR) is False:
        print "ERROR: PXELinux dir '%s' missing" % (PXECFGDIR)
        exit(1)
    for f in os.path.listdir(PXECFGDIR):
        if f.startswith("cfg-"):
            files.append(f[4:])

    return (v for v in files if v.startswith(prefix))

def main():

    # cmd opts
    parser = argparse.ArgumentParser(description='Cumulus workbench PXE installer helper')
    parser.add_argument('-s', help='server name',action='store',dest='server',required=True).completer = servercompleter
    parser.add_argument('-o', help='operating system reference',action='store',dest='os',required=True).completer = oscompleter
    parser.add_argument('-n', help='IPMI provision now',action='store_true',dest='now',required=False)

    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    # check and read json, does this wb even have servers? etc
    cfg = readconfig()
    cfgwb = cfg["reservation"]["workbench"]
    if "servers" not in cfgwb:
        print "ERROR: No servers attached to this workbench"
        exit(1)
    cfgservers = cfgwb["servers"]
    if len(cfgservers) == 0:
        print "ERROR: No servers attached to this workbench"
        exit(1)

    # check server specified exists
    cfgserver = None
    if args.server in cfgservers:
        cfgserver = cfgservers[args.server]
    else:
        print "ERROR: server '%s' not found in workbench" % (args.server)
        exit(1)

    # pxe dir
    if os.path.isdir(PXECFGDIR) is False:
        print "ERROR: PXELinux dir '%s' missing" % (PXECFGDIR)
        exit(1)

    # check OS specified exists
    pxecfgsrc = "%s/cfg-%s" % (PXECFGDIR, args.os)
    if os.path.isfile(pxecfgsrc) is False:
        print "ERROR: OS '%s' PXELinux cfg missing" % (args.os)
        exit(1)

    # try remove and copy
    pxeremovecopy(args.server, cfgserver, pxecfgsrc)

    # IPMI reboot and pxe first?
    if args.now:
        # TODO: maybe check IP responds
        print "* Attempting IPMI (%s) PXE first and reboot" % (cfgserver["ipmiip"])
        status = ipmicmd(cfgserver, "chassis power status").strip().lower()
        if status == "chassis power is on":
            print "* Power is on, setting PXE boot and power cycling"
            ipmicmd(cfgserver, "chassis bootdev pxe")
            ipmicmd(cfgserver, "chassis power cycle")
        elif status == "chassis power is off":
            print "* Power is off, setting PXE boot and powering on"
            ipmicmd(cfgserver, "chassis bootdev pxe")
            ipmicmd(cfgserver, "chassis power on")
        else:
            print "ERROR: Unknown power state '%s'" % (status)
            exit(1)
    exit(0)


if __name__ == '__main__':
    main()
